# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Docspring.Api.PDF do
  @moduledoc """
  API calls for all endpoints tagged `PDF`.
  """

  alias Docspring.Connection
  import Docspring.RequestBuilder

  @doc """
  Add new fields to a Template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `data` (AddFieldsData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.AddFieldsTemplateResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_fields_to_template(Tesla.Env.client, String.t, Docspring.Model.AddFieldsData.t, keyword()) :: {:ok, Docspring.Model.AddFieldsTemplateResponse.t} | {:error, Tesla.Env.t}
  def add_fields_to_template(connection, template_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/templates/#{template_id}/add_fields")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.AddFieldsTemplateResponse},
      {422, Docspring.Model.AddFieldsTemplateResponse}
    ])
  end

  @doc """
  Generates multiple PDFs

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `data` ([Docspring.Model.SubmissionData.t]): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CreateSubmissionResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec batch_generate_pdf_v1(Tesla.Env.client, String.t, list(Docspring.Model.SubmissionData.t), keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, [Docspring.Model.InvalidRequest.t]} | {:ok, [Docspring.Model.CreateSubmissionResponse.t]} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def batch_generate_pdf_v1(connection, template_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/templates/#{template_id}/submissions/batch")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateSubmissionResponse},
      {422, Docspring.Model.InvalidRequest},
      {401, Docspring.Model.AuthenticationError},
      {400, Docspring.Model.ErrorResponse}
    ])
  end

  @doc """
  Generates multiple PDFs

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data` (SubmissionBatchData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CreateSubmissionBatchResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec batch_generate_pdfs(Tesla.Env.client, Docspring.Model.SubmissionBatchData.t, keyword()) :: {:ok, Docspring.Model.CreateSubmissionBatchResponse.t} | {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def batch_generate_pdfs(connection, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/submissions/batches")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateSubmissionBatchResponse},
      {200, Docspring.Model.CreateSubmissionBatchResponse},
      {401, Docspring.Model.AuthenticationError},
      {400, Docspring.Model.ErrorResponse}
    ])
  end

  @doc """
  Merge submission PDFs, template PDFs, or custom files

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data` (CombinePdfsData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CreateCombinedSubmissionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec combine_pdfs(Tesla.Env.client, Docspring.Model.CombinePdfsData.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.CreateCombinedSubmissionResponse.t} | {:ok, Docspring.Model.InvalidRequest.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def combine_pdfs(connection, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/combined_submissions?v&#x3D;2")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateCombinedSubmissionResponse},
      {422, Docspring.Model.InvalidRequest},
      {400, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Merge generated PDFs together

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data` (CombinedSubmissionData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CreateCombinedSubmissionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec combine_submissions(Tesla.Env.client, Docspring.Model.CombinedSubmissionData.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.CreateCombinedSubmissionResponse.t} | {:ok, Docspring.Model.InvalidRequest.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def combine_submissions(connection, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/combined_submissions")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateCombinedSubmissionResponse},
      {422, Docspring.Model.InvalidRequest},
      {400, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Copy a Template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:body` (CopyTemplateData): 

  ### Returns

  - `{:ok, Docspring.Model.Template.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec copy_template(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Template.t} | {:error, Tesla.Env.t}
  def copy_template(connection, template_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/templates/#{template_id}/copy")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.Template},
      {404, Docspring.Model.ErrorResponse}
    ])
  end

  @doc """
  Create a new custom file from a cached presign upload

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data` (CreateCustomFileData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CreateCustomFileResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_custom_file_from_upload(Tesla.Env.client, Docspring.Model.CreateCustomFileData.t, keyword()) :: {:ok, Docspring.Model.CreateCustomFileResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def create_custom_file_from_upload(connection, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/custom_files")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateCustomFileResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Creates a new event for emailing a signee a request for signature

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data_request_id` (String.t): 
  - `event` (CreateSubmissionDataRequestEventRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CreateSubmissionDataRequestEventResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_data_request_event(Tesla.Env.client, String.t, Docspring.Model.CreateSubmissionDataRequestEventRequest.t, keyword()) :: {:ok, Docspring.Model.CreateSubmissionDataRequestEventResponse.t} | {:ok, Docspring.Model.InvalidRequest.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def create_data_request_event(connection, data_request_id, event, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/data_requests/#{data_request_id}/events")
      |> add_param(:body, :body, event)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateSubmissionDataRequestEventResponse},
      {401, Docspring.Model.AuthenticationError},
      {422, Docspring.Model.InvalidRequest}
    ])
  end

  @doc """
  Creates a new data request token for form authentication

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data_request_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CreateSubmissionDataRequestTokenResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_data_request_token(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.CreateSubmissionDataRequestTokenResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def create_data_request_token(connection, data_request_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/data_requests/#{data_request_id}/tokens")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateSubmissionDataRequestTokenResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Create a folder

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data` (CreateFolderData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.Folder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_folder(Tesla.Env.client, Docspring.Model.CreateFolderData.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Folder.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def create_folder(connection, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/folders/")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {422, Docspring.Model.Folder},
      {404, Docspring.Model.ErrorResponse},
      {200, Docspring.Model.Folder},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Create a new HTML template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data` (CreateHtmlTemplateData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.PendingTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_html_template(Tesla.Env.client, Docspring.Model.CreateHtmlTemplateData.t, keyword()) :: {:ok, Docspring.Model.PendingTemplate.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def create_html_template(connection, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/templates?desc&#x3D;html")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.PendingTemplate},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Create a new PDF template with a form POST file upload

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_left_square_bracketdocument_right_square_bracket` (String.t): 
  - `template_left_square_bracketname_right_square_bracket` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"template[parent_folder_id]"` (String.t): 

  ### Returns

  - `{:ok, Docspring.Model.PendingTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_pdf_template(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Docspring.Model.PendingTemplate.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def create_pdf_template(connection, template_left_square_bracketdocument_right_square_bracket, template_left_square_bracketname_right_square_bracket, opts \\ []) do
    optional_params = %{
      :"template[parent_folder_id]" => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/templates")
      |> add_param(:file, :"template[document]", template_left_square_bracketdocument_right_square_bracket)
      |> add_param(:form, :"template[name]", template_left_square_bracketname_right_square_bracket)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.PendingTemplate},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Create a new PDF template from a cached presign upload

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data` (CreateTemplateFromUploadData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.PendingTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_pdf_template_from_upload(Tesla.Env.client, Docspring.Model.CreateTemplateFromUploadData.t, keyword()) :: {:ok, Docspring.Model.PendingTemplate.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def create_pdf_template_from_upload(connection, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/templates?desc&#x3D;cached_upload")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.PendingTemplate},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Delete a folder

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `folder_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.Folder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_folder(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Folder.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def delete_folder(connection, folder_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/folders/#{folder_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {404, Docspring.Model.ErrorResponse},
      {422, Docspring.Model.ErrorResponse},
      {200, Docspring.Model.Folder},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Delete a template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:version` (String.t): 

  ### Returns

  - `{:ok, Docspring.Model.DeleteTemplateResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_template(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.DeleteTemplateResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def delete_template(connection, template_id, opts \\ []) do
    optional_params = %{
      :version => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/templates/#{template_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.DeleteTemplateResponse},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Expire a combined submission

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `combined_submission_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CombinedSubmission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec expire_combined_submission(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.CombinedSubmission.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def expire_combined_submission(connection, combined_submission_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/combined_submissions/#{combined_submission_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.CombinedSubmission},
      {404, Docspring.Model.ErrorResponse},
      {403, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Expire a PDF submission

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `submission_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.Submission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec expire_submission(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Submission.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def expire_submission(connection, submission_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/submissions/#{submission_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.Submission},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError},
      {403, Docspring.Model.ErrorResponse}
    ])
  end

  @doc """
  Generates a new PDF

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `submission` (CreateSubmissionData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CreateSubmissionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec generate_pdf(Tesla.Env.client, String.t, Docspring.Model.CreateSubmissionData.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.InvalidRequest.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:ok, Docspring.Model.CreateSubmissionResponse.t} | {:error, Tesla.Env.t}
  def generate_pdf(connection, template_id, submission, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/templates/#{template_id}/submissions")
      |> add_param(:body, :body, submission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Docspring.Model.CreateSubmissionResponse},
      {400, Docspring.Model.ErrorResponse},
      {422, Docspring.Model.InvalidRequest},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Generated a preview PDF for partially completed data requests

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `submission_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.PreviewPdfResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec generate_preview(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.PreviewPdfResponse.t} | {:error, Tesla.Env.t}
  def generate_preview(connection, submission_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/submissions/#{submission_id}/generate_preview")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.PreviewPdfResponse},
      {404, Docspring.Model.ErrorResponse},
      {422, Docspring.Model.PreviewPdfResponse}
    ])
  end

  @doc """
  Check the status of a combined submission (merged PDFs)

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `combined_submission_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.CombinedSubmission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_combined_submission(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.CombinedSubmission.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def get_combined_submission(connection, combined_submission_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/combined_submissions/#{combined_submission_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.CombinedSubmission},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Look up a submission data request

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data_request_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.SubmissionDataRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_data_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.SubmissionDataRequest.t} | {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def get_data_request(connection, data_request_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/data_requests/#{data_request_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.SubmissionDataRequest},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Fetch the full template attributes

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.FullTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_full_template(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.FullTemplate.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def get_full_template(connection, template_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/templates/#{template_id}?full&#x3D;true")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.FullTemplate},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Get a presigned URL so that you can upload a file to our AWS S3 bucket

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.UploadPresign.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_presign_url(Tesla.Env.client, keyword()) :: {:ok, Docspring.Model.AuthenticationError.t} | {:ok, Docspring.Model.UploadPresign.t} | {:error, Tesla.Env.t}
  def get_presign_url(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/uploads/presign")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.UploadPresign},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Check the status of a PDF

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `submission_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:include_data` (boolean()): 

  ### Returns

  - `{:ok, Docspring.Model.Submission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_submission(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Submission.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def get_submission(connection, submission_id, opts \\ []) do
    optional_params = %{
      :include_data => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/submissions/#{submission_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.Submission},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Check the status of a submission batch job

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `submission_batch_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:include_submissions` (boolean()): 

  ### Returns

  - `{:ok, Docspring.Model.SubmissionBatch.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_submission_batch(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.SubmissionBatch.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def get_submission_batch(connection, submission_batch_id, opts \\ []) do
    optional_params = %{
      :include_submissions => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/submissions/batches/#{submission_batch_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.SubmissionBatch},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Check the status of an uploaded template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.Template.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_template(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Template.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def get_template(connection, template_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/templates/#{template_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.Template},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Fetch the JSON schema for a template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.TemplateSchema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_template_schema(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.TemplateSchema.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def get_template_schema(connection, template_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/templates/#{template_id}/schema")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.TemplateSchema},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Get a list of all combined submissions

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Default: 1
    - `:per_page` (integer()): Default: 50

  ### Returns

  - `{:ok, [%CombinedSubmission{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_combined_submissions(Tesla.Env.client, keyword()) :: {:ok, [Docspring.Model.CombinedSubmission.t]} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def list_combined_submissions(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/combined_submissions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.CombinedSubmission},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Get a list of all folders

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:parent_folder_id` (String.t): Filter By Folder Id

  ### Returns

  - `{:ok, [%Folder{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_folders(Tesla.Env.client, keyword()) :: {:ok, [Docspring.Model.Folder.t]} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def list_folders(connection, opts \\ []) do
    optional_params = %{
      :parent_folder_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/folders/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.Folder},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  List all submissions

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cursor` (String.t): 
    - `:limit` (float()): 
    - `:created_after` (String.t): 
    - `:created_before` (String.t): 
    - `:type` (String.t): 
    - `:include_data` (boolean()): 

  ### Returns

  - `{:ok, Docspring.Model.ListSubmissionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_submissions(Tesla.Env.client, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:ok, Docspring.Model.ListSubmissionsResponse.t} | {:error, Tesla.Env.t}
  def list_submissions(connection, opts \\ []) do
    optional_params = %{
      :cursor => :query,
      :limit => :query,
      :created_after => :query,
      :created_before => :query,
      :type => :query,
      :include_data => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/submissions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.ListSubmissionsResponse},
      {400, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  List all submissions for a given template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:cursor` (String.t): 
    - `:limit` (float()): 
    - `:created_after` (String.t): 
    - `:created_before` (String.t): 
    - `:type` (String.t): 
    - `:include_data` (boolean()): 

  ### Returns

  - `{:ok, Docspring.Model.ListSubmissionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_template_submissions(Tesla.Env.client, String.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.ListSubmissionsResponse.t} | {:error, Tesla.Env.t}
  def list_template_submissions(connection, template_id, opts \\ []) do
    optional_params = %{
      :cursor => :query,
      :limit => :query,
      :created_after => :query,
      :created_before => :query,
      :type => :query,
      :include_data => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/templates/#{template_id}/submissions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.ListSubmissionsResponse},
      {404, Docspring.Model.ErrorResponse}
    ])
  end

  @doc """
  Get a list of all templates

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:query` (String.t): Search By Name
    - `:parent_folder_id` (String.t): Filter By Folder Id
    - `:page` (integer()): Default: 1
    - `:per_page` (integer()): Default: 50

  ### Returns

  - `{:ok, [%Template{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_templates(Tesla.Env.client, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, [Docspring.Model.Template.t]} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def list_templates(connection, opts \\ []) do
    optional_params = %{
      :query => :query,
      :parent_folder_id => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/templates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.Template},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Move a folder

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `folder_id` (String.t): 
  - `data` (MoveFolderData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.Folder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec move_folder_to_folder(Tesla.Env.client, String.t, Docspring.Model.MoveFolderData.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Folder.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def move_folder_to_folder(connection, folder_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/folders/#{folder_id}/move")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {404, Docspring.Model.ErrorResponse},
      {200, Docspring.Model.Folder},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Move Template to folder

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `data` (MoveTemplateData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.Template.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec move_template_to_folder(Tesla.Env.client, String.t, Docspring.Model.MoveTemplateData.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.Template.t} | {:error, Tesla.Env.t}
  def move_template_to_folder(connection, template_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/templates/#{template_id}/move")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.Template},
      {404, Docspring.Model.ErrorResponse}
    ])
  end

  @doc """
  Publish a template version

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `data` (PublishVersionData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.PublishTemplateVersionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec publish_template_version(Tesla.Env.client, String.t, Docspring.Model.PublishVersionData.t, keyword()) :: {:ok, Docspring.Model.PublishTemplateVersionResponse.t} | {:ok, Docspring.Model.PublishTemplateVersion404Response.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:ok, Docspring.Model.PublishTemplateVersion422Response.t} | {:error, Tesla.Env.t}
  def publish_template_version(connection, template_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/templates/#{template_id}/publish_version")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.PublishTemplateVersionResponse},
      {422, Docspring.Model.PublishTemplateVersion422Response},
      {404, Docspring.Model.PublishTemplateVersion404Response},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Rename a folder

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `folder_id` (String.t): 
  - `data` (RenameFolderData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rename_folder(Tesla.Env.client, String.t, Docspring.Model.RenameFolderData.t, keyword()) :: {:ok, nil} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def rename_folder(connection, folder_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/folders/#{folder_id}/rename")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {422, false},
      {404, false},
      {200, false},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Restore a template version

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `data` (RestoreVersionData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.RestoreTemplateVersionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec restore_template_version(Tesla.Env.client, String.t, Docspring.Model.RestoreVersionData.t, keyword()) :: {:ok, Docspring.Model.InvalidRequest.t} | {:ok, Docspring.Model.RestoreTemplateVersionResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def restore_template_version(connection, template_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/templates/#{template_id}/restore_version")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.RestoreTemplateVersionResponse},
      {422, Docspring.Model.InvalidRequest},
      {404, Docspring.Model.InvalidRequest},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Test Authentication

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.AuthenticationSuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec test_authentication(Tesla.Env.client, keyword()) :: {:ok, Docspring.Model.AuthenticationSuccessResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def test_authentication(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/authentication")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.AuthenticationSuccessResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Update a submission data request

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `data_request_id` (String.t): 
  - `data` (UpdateSubmissionDataRequestData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.UpdateDataRequestResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_data_request(Tesla.Env.client, String.t, Docspring.Model.UpdateSubmissionDataRequestData.t, keyword()) :: {:ok, Docspring.Model.ErrorResponse.t} | {:ok, Docspring.Model.InvalidRequest.t} | {:ok, Docspring.Model.UpdateDataRequestResponse.t} | {:ok, Docspring.Model.AuthenticationError.t} | {:error, Tesla.Env.t}
  def update_data_request(connection, data_request_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/data_requests/#{data_request_id}")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.UpdateDataRequestResponse},
      {422, Docspring.Model.InvalidRequest},
      {404, Docspring.Model.ErrorResponse},
      {401, Docspring.Model.AuthenticationError}
    ])
  end

  @doc """
  Update a Template

  ### Parameters

  - `connection` (Docspring.Connection): Connection to server
  - `template_id` (String.t): 
  - `data` (UpdateTemplateData): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Docspring.Model.UpdateTemplateResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_template(Tesla.Env.client, String.t, Docspring.Model.UpdateTemplateData.t, keyword()) :: {:ok, Docspring.Model.UpdateTemplateResponse.t} | {:error, Tesla.Env.t}
  def update_template(connection, template_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/templates/#{template_id}")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Docspring.Model.UpdateTemplateResponse}
    ])
  end
end
